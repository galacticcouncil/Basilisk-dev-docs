initSidebarItems({"constant":[["AVERAGE_ON_INITIALIZE_RATIO","We assume that an on-initialize consumes 2.5% of the weight on average, hence a single extrinsic will not be allowed to consume more than `AvailableBlockRatio - 2.5%`."],["BSX",""],["CENTS",""],["CORE_ASSET_ID","Core asset id"],["DAYS",""],["DOLLARS",""],["FORTUNE",""],["HOURS",""],["MAXIMUM_BLOCK_WEIGHT","We allow for"],["MILLICENTS",""],["MILLISECS_PER_BLOCK",""],["MINUTES",""],["SLOT_DURATION",""],["VERSION",""],["WASM_BINARY",""],["WASM_BINARY_BLOATY",""],["WEIGHT_PER_SECOND",""]],"enum":[["BalancesCall","Contains one variant per dispatchable that can be called by an extrinsic."],["Call",""],["DispatchClass","A generalized group of dispatch types."],["Event",""],["OriginCaller",""],["Pays","Explicit enum to denote if a transaction pays fee or not."],["TimestampCall","Contains one variant per dispatchable that can be called by an extrinsic."]],"fn":[["native_version","The version information used to identify this runtime when compiled natively."]],"macro":[["construct_runtime","Construct a runtime, with the given name and the given pallets."],["match_type","Create a type which implements the `Contains` trait for a particular type with syntax similar to `matches!`."],["parameter_types","Create new implementations of the `Get` trait."]],"mod":[["api",""],["opaque","Opaque types. These are used by the CLI to instantiate machinery that don’t need to know the specifics of the runtime. They can then be made to be agnostic over specific formats of data like extrinsics, allowing for them to continue syncing the network through upgrades to even the core data structures."]],"struct":[["AdjustmentVariable","The adjustment variable of the runtime. Higher values will cause `TargetBlockFullness` to change the fees more rapidly."],["BaseFilter",""],["BlockExecutionWeight","Importing a block with 0 txs takes ~5 ms"],["BlockHashCount",""],["BlockLength","Maximum length of block. Up to 5MB."],["BlockWeights","Block weights base values and limits."],["Burn",""],["CandidacyBond",""],["ClassBondAmount",""],["ClassBondDuration",""],["CooloffPeriod",""],["CouncilMaxMembers",""],["CouncilMaxProposals",""],["CouncilMotionDuration",""],["DataDepositPerByte",""],["DesiredMembers",""],["DesiredRunnersUp",""],["DisabledValidatorsThreshold",""],["DustingReward",""],["ElectionsPhragmenPalletId",""],["EnactmentPeriod",""],["EnsureRootOrTreasury",""],["ExchangeFee",""],["ExistentialDeposit",""],["ExistentialDeposits",""],["ExtrinsicBaseWeight",""],["ExtrinsicPaymentExtraWeight",""],["FastTrackVotingPeriod",""],["GenesisConfig",""],["IdentityFee","Implementor of `WeightToFeePolynomial` that maps one unit of weight to one unit of fee."],["InstantAllowed",""],["LBPExchangeFee",""],["LaunchPeriod",""],["MaxApprovals",""],["MaxCandidates",""],["MaxInvulnerables",""],["MaxLocks",""],["MaxProposals",""],["MaxReserves",""],["MaxScheduledPerBlock",""],["MaxVestingSchedules",""],["MaxVotes",""],["MaximumReasonLength",""],["MaximumSchedulerWeight",""],["MinCandidates",""],["MinVestedTransfer",""],["MinimumDeposit",""],["MinimumMultiplier","Minimum amount of the multiplier. This value cannot be too low. A test case should ensure that combined with `AdjustmentVariable`, we can recover from the minimum."],["MinimumPeriod",""],["MultiPaymentCurrencySetFee",""],["NativeAssetId",""],["Offset",""],["Origin",""],["PalletId","A pallet identifier. These are per pallet and should be stored in a registry somewhere."],["PalletInfo","Provides an implementation of `PalletInfo` to provide information about the pallet setup in the runtime."],["Perbill","A fixed point representation of a number in the range [0, 1]."],["Percent","A fixed point representation of a number in the range [0, 1]."],["Period",""],["Permill","A fixed point representation of a number in the range [0, 1]."],["Perquintill","A fixed point representation of a number in the range [0, 1]."],["PotId",""],["PreimageByteDeposit",""],["ProposalBond",""],["ProposalBondMinimum",""],["ProposalVotesRequired",""],["ReservedDmpWeight",""],["ReservedXcmpWeight",""],["RocksDbWeight","By default, Substrate uses RocksDB, so this will be the weight used throughout the runtime."],["Runtime",""],["RuntimeApi",""],["RuntimeApiImpl","Implements all runtime apis for the client side."],["SS58Prefix",""],["SpendPeriod",""],["TargetBlockFullness","The portion of the `NORMAL_DISPATCH_RATIO` that we adjust the fees with. Blocks filled less than this will decrease the weight and more will increase."],["TargetedFeeAdjustment","A struct to update the weight multiplier per block. It implements `Convert<Multiplier, Multiplier>`, meaning that it can convert the previous multiplier to the next one. This should be called on `on_finalize` of a block, prior to potentially cleaning the weight data from the system pallet."],["TechnicalMaxMembers",""],["TechnicalMaxProposals",""],["TechnicalMotionDuration",""],["TermDuration",""],["TipCountdown",""],["TipFindersFee",""],["TipReportDepositBase",""],["TipReportDepositPerByte",""],["TransactionByteFee",""],["TreasuryPalletId",""],["U128CurrencyToVote","An implementation of `CurrencyToVote` tailored for chain’s that have a balance type of u128."],["UncleGenerations",""],["Version",""],["VotingBondBase",""],["VotingBondFactor",""],["VotingPeriod",""],["WeightToFee",""],["WeightToFeeCoefficient","One coefficient and its position in the `WeightToFeePolynomial`."]],"trait":[["BuildStorage","Complex storage builder stuff."],["EnsureOrigin","Some sort of check on the origin is performed by this object."],["Filter","Simple trait for providing a filter over a reference to some type."],["FixedPointNumber","Something that implements a decimal fixed point number."],["Get","A trait for querying a single value from a type."],["KeyOwnerProofSystem","Something which can compute and check proofs of a historical key owner and return full identification data of that key owner."],["Randomness","A trait that is able to provide randomness."],["StorageValue","A trait for working with macro-generated storage values under the substrate storage API."],["WeightToFeePolynomial","A trait that describes the weight to fee calculation as polynomial."]],"type":[["AccountId","Some way of identifying an account on the chain. We intentionally make it equivalent to the public key of our transaction signing scheme."],["AccountIndex","The type for looking up accounts. We don’t expect more than 4 billion of them, but you never know…"],["Address","The address format for describing accounts."],["AllModules","All modules included in the runtime as a nested tuple of types. Excludes the System pallet."],["AllModulesWithSystem","All modules included in the runtime as a nested tuple of types."],["AllPallets","All pallets included in the runtime as a nested tuple of types. Excludes the System pallet."],["AllPalletsWithSystem","All pallets included in the runtime as a nested tuple of types."],["Amount","Signed version of Balance"],["AssetId","Type for storing the id of an asset."],["AssetRegistry",""],["AssetRegistryConfig",""],["Aura",""],["AuraConfig",""],["AuraExt",""],["AuraExtConfig",""],["AuraId","An Aura authority identifier using S/R 25519 as its crypto."],["Authorship",""],["Balance","Type for storing the balance of an account."],["Balances",""],["BalancesConfig",""],["Block","Block type as expected by this runtime."],["BlockId","BlockId type as expected by this runtime."],["BlockNumber","An index to a block."],["CheckedExtrinsic","Extrinsic type that has already been checked."],["CollatorSelection",""],["CollatorSelectionConfig",""],["Council",""],["CouncilConfig",""],["CumulusXcm",""],["Currencies",""],["Democracy",""],["DigestItem","Digest item type."],["DmpQueue",""],["Duster",""],["DusterConfig",""],["Elections",""],["ElectionsConfig",""],["Exchange",""],["Executive","Executive: handles dispatch to the various modules."],["Hash","A hash of some data used by the chain."],["Header","Block header type as expected by this runtime."],["Index","Index of a transaction in the chain."],["LBP",""],["LockIdentifier","An identifier for a lock. Used for disambiguating different locks so that they can be individually replaced or removed."],["Moment","Type used for expressing timestamp."],["MultiTransactionPayment",""],["MultiTransactionPaymentConfig",""],["Multiplier","Fee multiplier."],["NFT",""],["OrmlNft",""],["OrmlNftConfig",""],["ParachainInfo",""],["ParachainInfoConfig",""],["ParachainSystem",""],["PolkadotXcm",""],["RandomnessCollectiveFlip",""],["Scheduler",""],["Session",""],["SessionConfig",""],["Signature","Alias to 512-bit hash when used in the context of a transaction signature on the chain."],["SignedBlock","A Block signed with a Justification"],["SignedExtra","The SignedExtension to the basic transaction logic."],["SlowAdjustingFeeUpdate","Parameterized slow adjusting fee updated based on https://w3f-research.readthedocs.io/en/latest/polkadot/Token%20Economics.html#-2.-slow-adjusting-mechanism"],["Sudo",""],["SudoConfig",""],["System",""],["SystemConfig",""],["TechnicalCommittee",""],["TechnicalCommitteeConfig",""],["Timestamp",""],["Tips",""],["Tokens",""],["TokensConfig",""],["TransactionPayment",""],["Treasury",""],["TreasuryConfig",""],["UncheckedExtrinsic","Unchecked extrinsic type as expected by this runtime."],["UnknownTokens",""],["Utility",""],["Vesting",""],["VestingConfig",""],["Weight","Numeric range of a transaction weight."],["WeightToFeeCoefficients","A list of coefficients that represent one polynomial."],["XTokens",""],["XYK",""],["XcmpQueue",""]]});