(function() {var implementors = {};
implementors["pallet_transaction_multi_payment"] = [{"text":"impl&lt;T, C, OU, SW&gt; OnChargeTransaction&lt;T&gt; for <a class=\"struct\" href=\"pallet_transaction_multi_payment/struct.MultiCurrencyAdapter.html\" title=\"struct pallet_transaction_multi_payment::MultiCurrencyAdapter\">MultiCurrencyAdapter</a>&lt;C, OU, SW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"pallet_transaction_multi_payment/pallet/trait.Config.html\" title=\"trait pallet_transaction_multi_payment::pallet::Config\">Config</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::TransactionByteFee: Get&lt;&lt;C as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Currency&lt;&lt;T as Config&gt;::AccountId&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C::PositiveImbalance: Imbalance&lt;&lt;C as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance, Opposite = C::NegativeImbalance&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C::NegativeImbalance: Imbalance&lt;&lt;C as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::Balance, Opposite = C::PositiveImbalance&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;OU: OnUnbalanced&lt;&lt;C as Currency&lt;&lt;T as Config&gt;::AccountId&gt;&gt;::NegativeImbalance&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C::Balance: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"type\" href=\"primitives/type.Balance.html\" title=\"type primitives::Balance\">Balance</a>&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SW: CurrencySwap&lt;T::AccountId, <a class=\"type\" href=\"primitives/type.Balance.html\" title=\"type primitives::Balance\">Balance</a>&gt;,&nbsp;</span>","synthetic":false,"types":["pallet_transaction_multi_payment::MultiCurrencyAdapter"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()